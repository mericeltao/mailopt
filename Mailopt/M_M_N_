{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"UJJsS4haLiZW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682496719208,"user_tz":240,"elapsed":210,"user":{"displayName":"Joseph Abramov","userId":"13291097767250019485"}},"outputId":"3417f88e-96fd-46e3-fdcf-cbecbea1edc4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Simulation finished:\n","Average wait time: 8.871114594708839\n","Average queue length: 5.322668756825303\n","avg time between arrivals is 1.6642386390575723. Should be around 1/0.6\n"]}],"source":["import random\n","\n","class Mailroom:\n","    def __init__(self, lamda, mu,simtime, num_servers, test):\n","        # Initialize variables\n","        self.lamda = lamda   # Arrival rate\n","        self.simtime = simtime   # Simulation time\n","        self.num_servers = num_servers   # Number of servers\n","        self.clock = 0   # Simulation clock\n","        self.mu=mu #only if test\n","        self.queue = []   # Queue of customers\n","        self.servers = [0] * num_servers   # List of server times\n","        self.total_wait_time = 0   # Total wait time of customers in the system\n","        self.num_customers = 0   # Total number of customers that have entered the system\n","        self.test=test\n","        self.queue1=[]\n","\n","    def exponential_arrival(self):\n","        # Generate a random value from an exponential distribution with arrival rate lambda\n","        return random.expovariate(self.lamda)\n","\n","    def exponential_service(self):\n","      if not self.test:\n","        a=2\n","        b=5\n","        #small envelope by default becasue not all times provided\n","          # Generate a random value from an exponential distribution with service rate mu\n","        random_number=random.random()\n","        if random_number <= 0.39055:\n","            # do something for Envelopes (E)\n","            pass\n","\n","        elif random_number <= 0.3912:\n","            # do something for Extra Large Envelopes (E-XL)\n","            pass\n","\n","        elif random_number <= 0.3917:\n","            # do something for Small Envelopes (E-SM)\n","            pass\n","\n","        elif random_number <= 0.62269:\n","            # do something for Shelf Items (S)\n","            a=2\n","            b=3\n","\n","        elif random_number <= 0.7714:\n","            # do something for Package Room Items (PR)\n","            a=3\n","            b=5\n","\n","        elif random_number <=0.7838:\n","            # do something for Large Package Room Items (PR-BIG)\n","            a=5\n","            b=7\n","\n","        #elif random_number <= 0.7846:\n","            # do something for Back Room Items (BR)\n","         #   pass\n","\n","        elif random_number <= 0.78447 :\n","            # do something for Back Room Envelopes (BR-E). there are 0\n","            pass\n","\n","        elif random_number <= 0.79225:\n","            # do something for Perishable Items (P)\n","            a=1\n","            b=3\n","\n","        # elif random_number <= 0.81:\n","        #     # do something for Tubes (T)\n","        #     pass\n","\n","        # elif random_number <= 0.81:\n","        #     # do something for Luggage (LG)\n","        #     pass\n","\n","        # elif random_number <= 0.81:\n","        #     # do something for Laundry (L)\n","        #     pass\n","        \n","            \n","        elif random_number <= 0.8117:\n","            # do something for Flowers (F)\n","            pass\n","\n","        elif random_number <= 0.9999:\n","            # do something for Mail Items (M)\n","            a=2\n","            b=3\n","\n","        elif random_number <= 1:\n","            # do something for Extra Large Mail Items (M-XL)\n","            pass\n","        med=(b+a)/2\n","        mu_est = 1/(med-a)\n","        return min(random.expovariate(mu_est) + a,b)\n","      else:\n","        return random.expovariate(self.mu)\n","\n","\n","    def run_simulation(self):\n","        # Initialize variables\n","        total_queue_time = []\n","        prev_num_in_queue = 0\n","\n","        # Loop until the simulation clock reaches the end of the simulation time\n","        while self.clock < self.simtime:\n","\n","            if not self.queue:\n","                # If the queue is empty, generate a new arrival time for the next customer\n","                next_arrival_time = self.exponential_arrival()\n","                # Assign the new customer to an idle server\n","                server_index = self.servers.index(min(self.servers))\n","                start_service_time = (self.clock + next_arrival_time)\n","                self.servers[server_index] = start_service_time + self.exponential_service()\n","                self.total_wait_time += 0\n","                self.num_customers += 1\n","            else:\n","                # If the queue is not empty, serve the next customer in the queue\n","                server_index = self.servers.index(min(self.servers))\n","                start_service_time = max(self.clock, self.servers[server_index])\n","                self.servers[server_index] = start_service_time + self.exponential_service()\n","                self.total_wait_time += start_service_time - self.queue[0]\n","                self.num_customers += 1\n","                self.queue.pop(0)\n","\n","            # Generate new arrival time and add customer to queue\n","            next_arrival_time = self.exponential_arrival()\n","            self.queue.append(self.clock + next_arrival_time)\n","            self.queue1.append(self.clock + next_arrival_time)\n","\n","            # Update clock variable\n","            self.prev_clock=self.clock\n","            self.clock += next_arrival_time\n","            \n","\n","\n","        # Print simulation results\n","        print(\"Simulation finished:\")\n","        print(\"Average wait time:\", self.total_wait_time / self.num_customers)\n","        print(\"Average queue length:\", self.total_wait_time / self.num_customers*self.lamda)\n","        return self.queue1\n","        \n","\n","\n","# Example test with lambda = 0.6 and mu = 2\n","mailroom = Mailroom(0.6, 2, 100000, 2, False)\n","a=mailroom.run_simulation()\n","sum=0\n","for i in range (len(a)-1):\n","   sum+=a[i+1]-a[i]\n","\n","sum=sum/(len(a)-1)\n","print(\"avg time between arrivals is \" +str(sum)+\". Should be around 1/0.6\")"]}]}